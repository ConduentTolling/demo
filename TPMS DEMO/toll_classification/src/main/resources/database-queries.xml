<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
	<bean class="java.util.HashMap" id="queries">
		<constructor-arg>

			<map>
		
	<entry key="GET_DEVICE_STATUS"
		value="SELECT A.DEVICE_NO deviceNumber,A.ETC_ACCOUNT_ID etcAccountId,STATUS_TIMESTAMP,A.DEVICE_STATUS deviceStatus,A.IS_PREVALIDATED isPrevalidated ,A.RETAIL_TAG_STATUS retailTagStatus	
		FROM CRM.V_DEVICE A	WHERE DEVICE_NO IN (:DEVICE_NUMBER,:DEVICE_NUMBER_11_CHAR) AND STATUS_TIMESTAMP = (SELECT MAX(STATUS_TIMESTAMP) FROM CRM.V_DEVICE B WHERE A.DEVICE_NO = B.DEVICE_NO AND STATUS_TIMESTAMP &lt;= :TX_TIMESTAMP)"></entry>     				
    		      				
		
				<entry key="GET_ACCOUNT_INFO"
					value="SELECT 	
      		              A.POST_PAID_STATUS postPaidStatus, 
             A.PRIMARY_REBILL_PAY_TYPE primaryRebillPayType, 
                          A.ACCT_ACT_STATUS acctActStatus     FROM 
      		 CRM.V_ETC_ACCOUNT A 
      WHERE 
      		 A.ETC_ACCOUNT_ID =:ETC_ACCOUNT_ID AND A.OPEN_DATE &lt;= NVL(TO_DATE(:TX_DATE,'YYYY-MM-DD'),TO_DATE('1857-01-01','YYYY-MM-DD'))" ></entry>
      		 
      		 
      		<entry key="GET_ACCOUNT_INFO_DETAIL"
					value="select e.etc_account_id etcAccountId, e.agency_id agencyId, e.account_type_cd accountType, e.current_balance prepaidBalance, 
							e.postpaid_balance postpaidBalance, f.account_balance accountBalance,
							e.account_no accountNumber, e.acct_fin_status acctFinStatus
							from CRM.V_ETC_ACCOUNT e, fpms.t_fpms_account f
							WHERE f.ETC_ACCOUNT_ID = E.ETC_ACCOUNT_ID AND E.ETC_ACCOUNT_ID = :ETC_ACCOUNT_ID" ></entry>
							
				<entry key="GET_AGENCY_ID"
					value="select AGENCY_ID from crm.v_etc_account where ETC_ACCOUNT_ID = :ETC_ACCOUNT_ID" ></entry>
				
				<entry key="GET_ACCOUNT_PLAN"
					value="select PLAN_TYPE, PLAN_TYPE_NAME from crm.v_account_plan_detail where plan_type=186 and ETC_ACCOUNT_ID = :ETC_ACCOUNT_ID" ></entry>

          
          <!--  query as per NY -->
          <!--  <entry key="GET_H_DEVICE_STATUSS"
					value="SELECT Y.ETC_ACCOUNT_ID etcAccountId, 
           Y.DEVICE_STATUS deviceStatus,
           Y.DEVICE_NO deviceNumber
     FROM ( SELECT X.ETC_ACCOUNT_ID, 
                   X.DEVICE_STATUS,
                   X.DEVICE_NO
              FROM ( SELECT  NVL(ETC_ACCOUNT_ID,0) AS ETC_ACCOUNT_ID, 
                             NVL(DEVICE_STATUS,0) AS DEVICE_STATUS,
                             NVL(DEVICE_NO,0) AS DEVICE_NO
                	  FROM CRM.V_H_DEVICE 
                	  WHERE DEVICE_NO IN (:DEVICE_NUMBER, :DEVICE_NUMBER_11_CHAR)
                        AND STATUS_TIMESTAMP &lt; :TX_TIMESTAMP 
                       ORDER BY STATUS_TIMESTAMP DESC
                	) X    
         ) Y 
    WHERE ( NOT EXISTS (SELECT 1 
                          FROM CRM.V_DEVICE 
                         WHERE DEVICE_NO in(:DEVICE_NUMBER, :DEVICE_NUMBER_11_CHAR)   
                           AND STATUS_TIMESTAMP &lt; :TX_TIMESTAMP
                        )                             		
          )"></entry> -->


		<!-- new query as per NY for v_h_device -->
		
		 <entry key="GET_H_DEVICE_STATUS"
					value="SELECT Y.ETC_ACCOUNT_ID etcAccountId, 
           Y.DEVICE_STATUS deviceStatus,
           Y.DEVICE_NO deviceNumber
     FROM ( SELECT X.ETC_ACCOUNT_ID, 
                   X.DEVICE_STATUS,
                   X.DEVICE_NO
              FROM ( SELECT  NVL(ETC_ACCOUNT_ID,0) AS ETC_ACCOUNT_ID, 
                             NVL(DEVICE_STATUS,0) AS DEVICE_STATUS,
                             NVL(DEVICE_NO,0) AS DEVICE_NO
                	  FROM CRM.V_H_DEVICE A
                	  WHERE DEVICE_NO IN (:DEVICE_NUMBER, :DEVICE_NUMBER_11_CHAR)
                      AND STATUS_TIMESTAMP = (SELECT MAX(STATUS_TIMESTAMP) FROM CRM.V_H_DEVICE B
                      WHERE A.DEVICE_NO = B.DEVICE_NO  AND STATUS_TIMESTAMP &lt; :TX_TIMESTAMP )
                       ORDER BY STATUS_TIMESTAMP DESC
                	) X    
         ) Y 
    WHERE ( NOT EXISTS (SELECT 1 
                          FROM CRM.V_DEVICE 
                         WHERE DEVICE_NO in(:DEVICE_NUMBER, :DEVICE_NUMBER_11_CHAR)   
                           AND STATUS_TIMESTAMP &lt; :TX_TIMESTAMP
                        )                             		
          )"></entry>
		
		
		
		
		
				<!-- old running query -->
				<!-- <entry key="FIND_DEVICE_AWAY"
					value="SELECT T.IAG_TAG_STATUS  iagTagStatus
        FROM (SELECT IAG_TAG_STATUS FROM TPMS.T_OA_DEVICES 
			   WHERE DEVICE_NO = :DEVICE_NUMBER
			     AND START_DATE &lt;= NVL(:TX_TIMESTAMP,TO_TIMESTAMP( '1857-01-01 00:00:00.000' ,'YYYY-MM-DD HH24:MI:SS.FF3'))
			      AND END_DATE  &gt;= NVL(:TX_TIMESTAMP,TO_TIMESTAMP( '1857-01-01 00:00:00.000' ,'YYYY-MM-DD HH24:MI:SS.FF3')) 
			      ORDER BY UPDATE_TS DESC
			    ) T
			WHERE ROWNUM &lt; 2"></entry> -->
			
			
				<!-- new query for NY -->
			<entry key="FIND_DEVICE_AWAY"
					value="SELECT T.IAG_TAG_STATUS  iagTagStatus, T.DEVICE_NO deviceNumber, T.TAG_HOME_AGENCY
        			FROM (SELECT IAG_TAG_STATUS, DEVICE_NO, TAG_HOME_AGENCY FROM TPMS.T_OA_DEVICES 
			   		WHERE DEVICE_NO IN (:DEVICE_NUMBER, :DEVICE_NUMBER_11_CHAR)
					AND START_DATE &lt;= NVL(:TX_TIMESTAMP,TO_TIMESTAMP( '1857-01-01 00:00:00.000' ,'YYYY-MM-DD HH24:MI:SS.FF3'))
					AND END_DATE  &gt;= NVL(:TX_TIMESTAMP,TO_TIMESTAMP( '1857-01-01 00:00:00.000' ,'YYYY-MM-DD HH24:MI:SS.FF3')) 
			      	ORDER BY UPDATE_TS DESC) T
                 	 WHERE ROWNUM &lt; 2"></entry>


				<entry key="GET_T_AGENCY"
					value="SELECT AGENCY_ID agencyId, DEVICE_PREFIX devicePrefix ,IS_HOME_AGENCY isHomeAgency, PARENT_AGENCY_ID parentAgencyId, SCHEDULED_PRICING_FLAG scheduledPricingFlag FROM CRM.T_AGENCY"></entry>

				<!-- <entry key="GET_PROCESS_PARAMETER"
					value="  select  param_value paramValue
       from  MASTER.t_process_parameters
      where  param_code = :PARAM_NAME
        and  agency_id = :AGENCY_ID"></entry> -->
        
       <!--  commented above & added new query  -->
        <entry key="GET_PROCESS_PARAMETER"
					value="select  param_value paramValue, param_code paramName, agency_id agencyId   from  MASTER.t_process_parameters"></entry>

				<!-- old running query -->
				<!-- <entry key="GET_HA_TAG_STATUS"
					value=" SELECT IAG_DEVICE_STATUS  iagDeviceStatus
      FROM ( SELECT IAG_TAG_STATUS IAG_DEVICE_STATUS 
               FROM TPMS.T_HA_DEVICES
    		  WHERE DEVICE_NO = :DEVICE_NUMBER
    			AND NVL(TO_DATE(:TX_DATE,'YYYY-MM-DD'),TO_DATE('1857-01-01','YYYY-MM-DD'))
					BETWEEN START_DATE AND END_DATE ORDER BY END_DATE) 
	 WHERE ROWNUM &lt;= 2"></entry> -->

			<entry key="GET_HA_TAG_STATUS"
					value=" SELECT IAG_DEVICE_STATUS  iagDeviceStatus, DEVICE_NO deviceNumber
      			FROM ( SELECT IAG_TAG_STATUS IAG_DEVICE_STATUS ,  DEVICE_NO DEVICE_NO
               	FROM TPMS.T_HA_DEVICES
    		 	 WHERE DEVICE_NO IN (:DEVICE_NUMBER, :DEVICE_NUMBER_11_CHAR)
    			AND NVL(TO_DATE(:TX_DATE,'YYYY-MM-DD'),TO_DATE('1857-01-01','YYYY-MM-DD'))
					BETWEEN START_DATE AND END_DATE ORDER BY END_DATE) "></entry>
					
					
				<entry key="GET_T_CODE"
					value="select code_type codeType, code_id codeId, code_value codeValue from MASTER.t_codes  where CODE_TYPE = :CODE_TYPE"></entry>



				<entry key="GET_T_AGENCY_SCHEDULE_PRICING_BY_ID"
					value="SELECT nvl(SCHEDULED_PRICING_FLAG,'N') as scheduledPricingFlag FROM CRM.T_AGENCY where AGENCY_ID=?"></entry>

				<entry key="GET_PRICING_SCHEDULE"
					value="SELECT P.price_schedule_id priceScheduleId FROM MASTER.T_TOLL_PRICE_SCHEDULE P WHERE P.EFFECTIVE_DATE &lt;= NVL(TO_DATE(?,'YYYY-MM-DD'),TO_DATE('1857-01-01','YYYY-MM-DD')) AND P.EXPIRY_DATE &gt;= NVL(TO_DATE(?,'YYYY-MM-DD'),TO_DATE('1857-01-01','YYYY-MM-DD'))AND P.DAYS_IND = ? AND P.AGENCY_ID = ? AND rownum &lt; 2"></entry>

<entry key="GET_PRICING_SCHEDULE_NEW"
					value="SELECT price_schedule_id priceScheduleId, EFFECTIVE_DATE effectiveDate,EXPIRY_DATE expiryDate,DAYS_IND daysInd,AGENCY_ID agencyId FROM MASTER.T_TOLL_PRICE_SCHEDULE"></entry>



<entry key="GET_TOLL_PRICES"
					value="SELECT nvl(T.FULL_FARE,0) fullFareAmount, nvl(T.DISCOUNT_FARE,0) discountFareAmount, nvl(T.EXTRA_AXLE_CHARGE,0) extraAxleCharge,T.REVENUE_TYPE_ID  revenueTypeId,T.TOLL_SCHEDULE_ID tollScheduleId
FROM MASTER.T_TOLL_SCHEDULE T WHERE T.EFFECTIVE_DATE &lt;= NVL(TO_DATE(:TX_DATE,'YYYY-MM-DD'),TO_DATE('1857-01-01','YYYY-MM-DD')) AND T.EXPIRY_DATE &gt;= NVL(TO_DATE(:TX_DATE,'YYYY-MM-DD'),TO_DATE('1857-01-01','YYYY-MM-DD')) AND T.PLAZA_ID = :PLAZA_ID AND nvl(T.ENTRY_PLAZA_ID,0) = :ENTRY_PLAZA_ID AND T.VEHICLE_CLASS = :VEHICLE_CLASS  AND T.PLAN_TYPE_ID = :PLAN_TYPE_ID
AND T.PRICE_SCHEDULE_ID = :PRICE_SCHEDULE_ID AND T.REVENUE_TYPE_ID IN (:REVENUE_TYPE)"></entry>


<entry key="GET_TOLL_PRICES_NEW"
					value="select FULL_FARE  fullFareAmount, DISCOUNT_FARE discountFareAmount,EXTRA_AXLE_CHARGE extraAxleCharge,REVENUE_TYPE_ID revenueTypeIdList,TOLL_SCHEDULE_ID tollScheduleId, EFFECTIVE_DATE effectiveDate,EXPIRY_DATE expirayDate,PLAZA_ID plazaId,ENTRY_PLAZA_ID entryPlazaId,VEHICLE_CLASS vehicleClass,PLAN_TYPE_ID planTypeId,PRICE_SCHEDULE_ID priceScheduleId FROM MASTER.T_TOLL_SCHEDULE where REVENUE_TYPE_ID  in(1,3,9,60)"></entry>



				<entry key="INSERT_INTO_T_HOME_ETC_QUEUE"
					value="INSERT INTO TPMS.T_HOME_ETC_QUEUE(LANE_TX_ID,TX_EXTERN_REF_NO,TX_SEQ_NUMBER,EXTERN_FILE_ID,PLAZA_AGENCY_ID,PLAZA_ID,LANE_ID,TX_TIMESTAMP,TX_MOD_SEQ,TX_TYPE,TX_SUB_TYPE,TOLL_SYSTEM_TYPE,LANE_MODE,LANE_TYPE,LANE_STATE,LANE_HEALTH,COLLECTOR_ID,TOUR_SEGMENT_ID,ENTRY_DATA_SOURCE,ENTRY_LANE_ID,ENTRY_PLAZA_ID,ENTRY_TIMESTAMP,ENTRY_TX_SEQ_NUMBER,ENTRY_VEHICLE_SPEED,LANE_TX_STATUS,LANE_TX_TYPE,TOLL_REVENUE_TYPE,ACTUAL_CLASS,ACTUAL_AXLES,ACTUAL_EXTRA_AXLES,COLLECTOR_CLASS,COLLECTOR_AXLES,PRECLASS_CLASS,PRECLASS_AXLES,POSTCLASS_CLASS,POSTCLASS_AXLES,FORWARD_AXLES,REVERSE_AXLES,ETC_FARE_AMOUNT,POSTED_FARE_AMOUNT,COLLECTED_AMOUNT,UNREALIZED_AMOUNT,IS_DISCOUNTABLE,IS_MEDIAN_FARE,IS_PEAK,PRICE_SCHEDULE_ID,VEHICLE_SPEED,RECEIPT_ISSUED,DEVICE_NO,ACCOUNT_TYPE,DEVICE_CODED_CLASS,DEVICE_AGENCY_CLASS,DEVICE_IAG_CLASS,DEVICE_AXLES,ETC_ACCOUNT_ID,ACCOUNT_AGENCY_ID,READ_AVI_CLASS,READ_AVI_AXLES,DEVICE_PROGRAM_STATUS,BUFFERED_READ_FLAG,LANE_DEVICE_STATUS,POST_DEVICE_STATUS,PRE_TXN_BALANCE,PLAN_TYPE_ID,SPEED_VIOL_FLAG,IMAGE_TAKEN,PLATE_COUNTRY,PLATE_STATE,PLATE_NUMBER,REVENUE_DATE,POSTED_DATE,ATP_FILE_ID,IS_REVERSED,CORR_REASON_ID,RECON_DATE,RECON_STATUS_IND,RECON_SUB_CODE_IND,EXTERN_FILE_DATE,MILEAGE,DEVICE_READ_COUNT,DEVICE_WRITE_COUNT,ENTRY_DEVICE_READ_COUNT,ENTRY_DEVICE_WRITE_COUNT,DEPOSIT_ID,TX_DATE,CSC_LOOKUP_KEY,UPDATE_TS,RECIPROCITY_TRX,EXPECTED_REVENUE_AMOUNT,CASH_FARE_AMOUNT,VIDEO_FARE_AMOUNT,TX_STATUS) VALUES
(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"></entry>


<entry key="INSERT_INTO_T_VIOL_QUEUE"
					value="INSERT INTO TPMS.T_VIOL_QUEUE(LANE_TX_ID,TX_EXTERN_REF_NO,TX_SEQ_NUMBER,EXTERN_FILE_ID,PLAZA_AGENCY_ID,PLAZA_ID,LANE_ID,TX_TIMESTAMP,TX_MOD_SEQ,TX_TYPE,TX_SUB_TYPE,TOLL_SYSTEM_TYPE,LANE_MODE,LANE_TYPE,LANE_STATE,LANE_HEALTH,COLLECTOR_ID,TOUR_SEGMENT_ID,ENTRY_DATA_SOURCE,ENTRY_LANE_ID,ENTRY_PLAZA_ID,ENTRY_TIMESTAMP,ENTRY_TX_SEQ_NUMBER,ENTRY_VEHICLE_SPEED,LANE_TX_STATUS,LANE_TX_TYPE,TOLL_REVENUE_TYPE,ACTUAL_CLASS,ACTUAL_AXLES,ACTUAL_EXTRA_AXLES,COLLECTOR_CLASS,COLLECTOR_AXLES,PRECLASS_CLASS,PRECLASS_AXLES,POSTCLASS_CLASS,POSTCLASS_AXLES,FORWARD_AXLES,REVERSE_AXLES,ETC_FARE_AMOUNT,POSTED_FARE_AMOUNT,COLLECTED_AMOUNT,UNREALIZED_AMOUNT,IS_DISCOUNTABLE,IS_MEDIAN_FARE,IS_PEAK,PRICE_SCHEDULE_ID,VEHICLE_SPEED,RECEIPT_ISSUED,DEVICE_NO,ACCOUNT_TYPE,DEVICE_CODED_CLASS,DEVICE_AGENCY_CLASS,DEVICE_IAG_CLASS,DEVICE_AXLES,ETC_ACCOUNT_ID,ACCOUNT_AGENCY_ID,READ_AVI_CLASS,READ_AVI_AXLES,DEVICE_PROGRAM_STATUS,BUFFERED_READ_FLAG,LANE_DEVICE_STATUS,POST_DEVICE_STATUS,PRE_TXN_BALANCE,PLAN_TYPE_ID,SPEED_VIOL_FLAG,IMAGE_TAKEN,PLATE_COUNTRY,PLATE_STATE,PLATE_NUMBER,REVENUE_DATE,POSTED_DATE,ATP_FILE_ID,IS_REVERSED,CORR_REASON_ID,RECON_DATE,RECON_STATUS_IND,RECON_SUB_CODE_IND,EXTERN_FILE_DATE,MILEAGE,DEVICE_READ_COUNT,DEVICE_WRITE_COUNT,ENTRY_DEVICE_READ_COUNT,ENTRY_DEVICE_WRITE_COUNT,DEPOSIT_ID,TX_DATE,CSC_LOOKUP_KEY,UPDATE_TS,RECIPROCITY_TRX,EXPECTED_REVENUE_AMOUNT,CASH_FARE_AMOUNT,VIDEO_FARE_AMOUNT,TX_STATUS) VALUES
(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"></entry>


<entry key="INSERT_INTO_T_AGENCY_TX_PENDING"
					value="INSERT INTO TPMS.T_AGENCY_TX_PENDING(LANE_TX_ID,TX_EXTERN_REF_NO,TX_SEQ_NUMBER,EXTERN_FILE_ID,PLAZA_AGENCY_ID,PLAZA_ID,LANE_ID,TX_TIMESTAMP,TX_MOD_SEQ,TX_TYPE,TX_SUB_TYPE,TOLL_SYSTEM_TYPE,LANE_MODE,LANE_TYPE,LANE_STATE,LANE_HEALTH,COLLECTOR_ID,TOUR_SEGMENT_ID,ENTRY_DATA_SOURCE,ENTRY_LANE_ID,ENTRY_PLAZA_ID,ENTRY_TIMESTAMP,ENTRY_TX_SEQ_NUMBER,ENTRY_VEHICLE_SPEED,LANE_TX_STATUS,LANE_TX_TYPE,TOLL_REVENUE_TYPE,ACTUAL_CLASS,ACTUAL_AXLES,ACTUAL_EXTRA_AXLES,COLLECTOR_CLASS,COLLECTOR_AXLES,PRECLASS_CLASS,PRECLASS_AXLES,POSTCLASS_CLASS,POSTCLASS_AXLES,FORWARD_AXLES,REVERSE_AXLES,ETC_FARE_AMOUNT,POSTED_FARE_AMOUNT,COLLECTED_AMOUNT,UNREALIZED_AMOUNT,IS_DISCOUNTABLE,IS_MEDIAN_FARE,IS_PEAK,PRICE_SCHEDULE_ID,VEHICLE_SPEED,RECEIPT_ISSUED,DEVICE_NO,ACCOUNT_TYPE,DEVICE_CODED_CLASS,DEVICE_AGENCY_CLASS,DEVICE_IAG_CLASS,DEVICE_AXLES,ETC_ACCOUNT_ID,ACCOUNT_AGENCY_ID,READ_AVI_CLASS,READ_AVI_AXLES,DEVICE_PROGRAM_STATUS,BUFFERED_READ_FLAG,LANE_DEVICE_STATUS,POST_DEVICE_STATUS,PRE_TXN_BALANCE,PLAN_TYPE_ID,SPEED_VIOL_FLAG,IMAGE_TAKEN,PLATE_COUNTRY,PLATE_STATE,PLATE_NUMBER,REVENUE_DATE,POSTED_DATE,ATP_FILE_ID,IS_REVERSED,CORR_REASON_ID,RECON_DATE,RECON_STATUS_IND,RECON_SUB_CODE_IND,EXTERN_FILE_DATE,MILEAGE,DEVICE_READ_COUNT,DEVICE_WRITE_COUNT,ENTRY_DEVICE_READ_COUNT,ENTRY_DEVICE_WRITE_COUNT,DEPOSIT_ID,TX_DATE,CSC_LOOKUP_KEY,UPDATE_TS,RECIPROCITY_TRX,EXPECTED_REVENUE_AMOUNT,SOURCE_SYSTEM,CASH_FARE_AMOUNT,VIDEO_FARE_AMOUNT,TX_STATUS) VALUES
(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"></entry>

<entry key="INSERT_INTO_T_UNMATCHED_ENTRY_TX" value="INSERT INTO TPMS.T_UNMATCHED_ENTRY_TX(LANE_TX_ID,TX_MOD_SEQ,ACCOUNT_AGENCY_ID,ACCOUNT_TYPE,ACTUAL_AXLES,ACTUAL_CLASS,ACTUAL_EXTRA_AXLES,ATP_FILE_ID,BUFFERED_READ_FLAG,COLLECTED_AMOUNT,COLLECTOR_AXLES,COLLECTOR_CLASS,COLLECTOR_ID,CORR_REASON_ID,DEPOSIT_ID,DEVICE_AGENCY_CLASS,DEVICE_AXLES,DEVICE_CODED_CLASS,DEVICE_IAG_CLASS,DEVICE_NO,DEVICE_PROGRAM_STATUS,DEVICE_READ_COUNT,DEVICE_WRITE_COUNT,ENTRY_DATA_SOURCE,ENTRY_DEVICE_READ_COUNT,ENTRY_DEVICE_WRITE_COUNT,ENTRY_LANE_ID,ENTRY_PLAZA_ID,ENTRY_TIMESTAMP,ENTRY_TX_SEQ_NUMBER,ENTRY_VEHICLE_SPEED,ETC_ACCOUNT_ID,EXTERN_FILE_DATE,EXTERN_FILE_ID,FORWARD_AXLES,IMAGE_TAKEN,IS_DISCOUNTABLE,IS_MEDIAN_FARE,IS_PEAK,IS_REVERSED,LANE_DEVICE_STATUS,LANE_HEALTH,LANE_ID,LANE_MODE,LANE_STATE,LANE_TX_STATUS,LANE_TX_TYPE,LANE_TYPE,MILEAGE,PLAN_TYPE_ID,PLATE_COUNTRY,PLATE_NUMBER,PLATE_STATE,PLAZA_AGENCY_ID,PLAZA_ID,POSTCLASS_AXLES,POSTCLASS_CLASS,POSTED_DATE,POST_DEVICE_STATUS,PRECLASS_AXLES,PRECLASS_CLASS,PRE_TXN_BALANCE,PRICE_SCHEDULE_ID,READ_AVI_AXLES,READ_AVI_CLASS,RECEIPT_ISSUED,RECON_DATE,RECON_STATUS_IND,RECON_SUB_CODE_IND,REVENUE_DATE,REVERSE_AXLES,SPEED_VIOL_FLAG,TOLL_REVENUE_TYPE,TOLL_SYSTEM_TYPE,TOUR_SEGMENT_ID,TX_DATE,TX_EXTERN_REF_NO,TX_SEQ_NUMBER,TX_STATUS,TX_SUBTYPE_IND,TX_TIMESTAMP,TX_TYPE_IND,UNREALIZED_AMOUNT,UPDATE_TS,VEHICLE_SPEED,EXPECTED_REVENUE_AMOUNT,CASH_FARE_AMOUNT,VIDEO_FARE_AMOUNT,ETC_FARE_AMOUNT,POSTED_FARE_AMOUNT)VALUES(:LANE_TX_ID,:TX_MOD_SEQ,:ACCOUNT_AGENCY_ID,:ACCOUNT_TYPE,:ACTUAL_AXLES,:ACTUAL_CLASS,:ACTUAL_EXTRA_AXLES,:ATP_FILE_ID,:BUFFERED_READ_FLAG,:COLLECTED_AMOUNT,:COLLECTOR_AXLES,:COLLECTOR_CLASS,:COLLECTOR_ID,:CORR_REASON_ID,:DEPOSIT_ID,:DEVICE_AGENCY_CLASS,:DEVICE_AXLES,:DEVICE_CODED_CLASS,:DEVICE_IAG_CLASS,:DEVICE_NO,:DEVICE_PROGRAM_STATUS,:DEVICE_READ_COUNT,:DEVICE_WRITE_COUNT,:ENTRY_DATA_SOURCE,:ENTRY_DEVICE_READ_COUNT,:ENTRY_DEVICE_WRITE_COUNT,:ENTRY_LANE_ID,:ENTRY_PLAZA_ID,:ENTRY_TIMESTAMP,:ENTRY_TX_SEQ_NUMBER,:ENTRY_VEHICLE_SPEED,:ETC_ACCOUNT_ID,:EXTERN_FILE_DATE,:EXTERN_FILE_ID,:FORWARD_AXLES,:IMAGE_TAKEN,:IS_DISCOUNTABLE,:IS_MEDIAN_FARE,:IS_PEAK,:IS_REVERSED,:LANE_DEVICE_STATUS,:LANE_HEALTH,:LANE_ID,:LANE_MODE,:LANE_STATE,:LANE_TX_STATUS,:LANE_TX_TYPE,:LANE_TYPE,:MILEAGE,:PLAN_TYPE_ID,:PLATE_COUNTRY,:PLATE_NUMBER,:PLATE_STATE,:PLAZA_AGENCY_ID,:PLAZA_ID,:POSTCLASS_AXLES,:POSTCLASS_CLASS,:POSTED_DATE,:POST_DEVICE_STATUS,:PRECLASS_AXLES,:PRECLASS_CLASS,:PRE_TXN_BALANCE,:PRICE_SCHEDULE_ID,:READ_AVI_AXLES,:READ_AVI_CLASS,:RECEIPT_ISSUED,:RECON_DATE,:RECON_STATUS_IND,:RECON_SUB_CODE_IND,:REVENUE_DATE,:REVERSE_AXLES,:SPEED_VIOL_FLAG,:TOLL_REVENUE_TYPE,:TOLL_SYSTEM_TYPE,:TOUR_SEGMENT_ID,:TX_DATE,:TX_EXTERN_REF_NO,:TX_SEQ_NUMBER,:TX_STATUS,:TX_SUBTYPE_IND,:TX_TIMESTAMP,:TX_TYPE_IND,:UNREALIZED_AMOUNT,:UPDATE_TS,:VEHICLE_SPEED,:EXPECTED_REVENUE_AMOUNT,:CASH_FARE_AMOUNT,:VIDEO_FARE_AMOUNT,:ETC_FARE_AMOUNT,:POSTED_FARE_AMOUNT)"></entry>


<entry key="INSERT_INTO_T_UNMATCHED_EXIT_TX" value="INSERT INTO TPMS.T_UNMATCHED_EXIT_TX(LANE_TX_ID,TX_MOD_SEQ,ACCOUNT_AGENCY_ID,ACCOUNT_TYPE,ACTUAL_AXLES,ACTUAL_CLASS,ACTUAL_EXTRA_AXLES,ATP_FILE_ID,BUFFERED_READ_FLAG,COLLECTED_AMOUNT,COLLECTOR_AXLES,COLLECTOR_CLASS,COLLECTOR_ID,CORR_REASON_ID,DEPOSIT_ID,DEVICE_AGENCY_CLASS,DEVICE_AXLES,DEVICE_CODED_CLASS,DEVICE_IAG_CLASS,DEVICE_NO,DEVICE_PROGRAM_STATUS,DEVICE_READ_COUNT,DEVICE_WRITE_COUNT,ENTRY_DATA_SOURCE,ENTRY_DEVICE_READ_COUNT,ENTRY_DEVICE_WRITE_COUNT,ENTRY_LANE_ID,ENTRY_PLAZA_ID,ENTRY_TIMESTAMP,ENTRY_TX_SEQ_NUMBER,ENTRY_VEHICLE_SPEED,ETC_ACCOUNT_ID,EXTERN_FILE_DATE,EXTERN_FILE_ID,FORWARD_AXLES,IMAGE_TAKEN,IS_DISCOUNTABLE,IS_MEDIAN_FARE,IS_PEAK,IS_REVERSED,LANE_DEVICE_STATUS,LANE_HEALTH,LANE_ID,LANE_MODE,LANE_STATE,LANE_TX_STATUS,LANE_TX_TYPE,LANE_TYPE,MILEAGE,PLAN_TYPE_ID,PLATE_COUNTRY,PLATE_NUMBER,PLATE_STATE,PLAZA_AGENCY_ID,PLAZA_ID,POSTCLASS_AXLES,POSTCLASS_CLASS,POSTED_DATE,POST_DEVICE_STATUS,PRECLASS_AXLES,PRECLASS_CLASS,PRE_TXN_BALANCE,PRICE_SCHEDULE_ID,READ_AVI_AXLES,READ_AVI_CLASS,RECEIPT_ISSUED,RECON_DATE,RECON_STATUS_IND,RECON_SUB_CODE_IND,REVENUE_DATE,REVERSE_AXLES,SPEED_VIOL_FLAG,TOLL_REVENUE_TYPE,TOLL_SYSTEM_TYPE,TOUR_SEGMENT_ID,TX_DATE,TX_EXTERN_REF_NO,TX_SEQ_NUMBER,TX_STATUS,TX_SUBTYPE_IND,TX_TIMESTAMP,TX_TYPE_IND,UNREALIZED_AMOUNT,UPDATE_TS,VEHICLE_SPEED,EXPECTED_REVENUE_AMOUNT,CASH_FARE_AMOUNT,VIDEO_FARE_AMOUNT,ETC_FARE_AMOUNT,POSTED_FARE_AMOUNT)VALUES(:LANE_TX_ID,:TX_MOD_SEQ,:ACCOUNT_AGENCY_ID,:ACCOUNT_TYPE,:ACTUAL_AXLES,:ACTUAL_CLASS,:ACTUAL_EXTRA_AXLES,:ATP_FILE_ID,:BUFFERED_READ_FLAG,:COLLECTED_AMOUNT,:COLLECTOR_AXLES,:COLLECTOR_CLASS,:COLLECTOR_ID,:CORR_REASON_ID,:DEPOSIT_ID,:DEVICE_AGENCY_CLASS,:DEVICE_AXLES,:DEVICE_CODED_CLASS,:DEVICE_IAG_CLASS,:DEVICE_NO,:DEVICE_PROGRAM_STATUS,:DEVICE_READ_COUNT,:DEVICE_WRITE_COUNT,:ENTRY_DATA_SOURCE,:ENTRY_DEVICE_READ_COUNT,:ENTRY_DEVICE_WRITE_COUNT,:ENTRY_LANE_ID,:ENTRY_PLAZA_ID,:ENTRY_TIMESTAMP,:ENTRY_TX_SEQ_NUMBER,:ENTRY_VEHICLE_SPEED,:ETC_ACCOUNT_ID,:EXTERN_FILE_DATE,:EXTERN_FILE_ID,:FORWARD_AXLES,:IMAGE_TAKEN,:IS_DISCOUNTABLE,:IS_MEDIAN_FARE,:IS_PEAK,:IS_REVERSED,:LANE_DEVICE_STATUS,:LANE_HEALTH,:LANE_ID,:LANE_MODE,:LANE_STATE,:LANE_TX_STATUS,:LANE_TX_TYPE,:LANE_TYPE,:MILEAGE,:PLAN_TYPE_ID,:PLATE_COUNTRY,:PLATE_NUMBER,:PLATE_STATE,:PLAZA_AGENCY_ID,:PLAZA_ID,:POSTCLASS_AXLES,:POSTCLASS_CLASS,:POSTED_DATE,:POST_DEVICE_STATUS,:PRECLASS_AXLES,:PRECLASS_CLASS,:PRE_TXN_BALANCE,:PRICE_SCHEDULE_ID,:READ_AVI_AXLES,:READ_AVI_CLASS,:RECEIPT_ISSUED,:RECON_DATE,:RECON_STATUS_IND,:RECON_SUB_CODE_IND,:REVENUE_DATE,:REVERSE_AXLES,:SPEED_VIOL_FLAG,:TOLL_REVENUE_TYPE,:TOLL_SYSTEM_TYPE,:TOUR_SEGMENT_ID,:TX_DATE,:TX_EXTERN_REF_NO,:TX_SEQ_NUMBER,:TX_STATUS,:TX_SUBTYPE_IND,:TX_TIMESTAMP,:TX_TYPE_IND,:UNREALIZED_AMOUNT,:UPDATE_TS,:VEHICLE_SPEED,:EXPECTED_REVENUE_AMOUNT,:CASH_FARE_AMOUNT,:VIDEO_FARE_AMOUNT,:ETC_FARE_AMOUNT,:POSTED_FARE_AMOUNT)"></entry>


<entry key="UPDATE_T_TRANS_TABLE" value="update TPMS.T_TRAN_DETAIL set ETC_ACCOUNT_ID=?,ATP_FILE_ID=?,ACCOUNT_TYPE=?,ACCT_AGENCY_ID=?,ETC_FARE_AMOUNT=?,POSTED_FARE_AMOUNT=?,UPDATE_TS=?,tx_type=?, tx_sub_type=?,reciprocity_trx=?,EXPECTED_REVENUE_AMOUNT=?,CASH_FARE_AMOUNT=?,VIDEO_FARE_AMOUNT=?,TX_STATUS=?,PLAN_TYPE=?,IS_VIOLATION=?,TOLL_REVENUE_TYPE=?,HOV_FLAG=?
where LANE_TX_ID=?"></entry>

<entry key="GET_ACCOUNT_SPEED_STATUS" value="SELECT B.CODE_ID FROM TPMS.T_SPEED_STATUS A, MASTER.T_CODES B WHERE A.SPEED_STATUS = B.code_value AND B.CODE_TYPE = 'SPEED_STATUS' AND ETC_ACCOUNT_ID = :ETC_ACCOUNT_ID AND NVL(TO_DATE(:IN_TX_DATE,'YYYY-MM-DD'),TO_DATE('1857-01-01','YYYY-MM-DD')) BETWEEN START_DATE AND END_DATE AND ROWNUM &lt; 2 ORDER BY START_DATE DESC"></entry>
<entry key="GET_DEVICE_SPEED_STATUS" value="SELECT B.CODE_ID FROM TPMS.T_SPEED_STATUS A, MASTER.T_CODES B WHERE A.SPEED_STATUS = B.code_value AND B.CODE_TYPE = 'SPEED_STATUS' AND ETC_ACCOUNT_ID = :ETC_ACCOUNT_ID AND DEVICE_NO = :DEVICE_NO AND NVL(TO_DATE(:IN_TX_DATE,'YYYY-MM-DD'),TO_DATE('1857-01-01','YYYY-MM-DD')) BETWEEN START_DATE AND END_DATE AND ROWNUM &lt; 2 ORDER BY START_DATE DESC"></entry>
<entry key="GET_SPEED_THRESHOLD_FOR_LANE" value="SELECT LOWER_SPEED_THRESHOLD FROM TPMS.T_SPEED_THRESHOLD WHERE AGENCY_ID = :IN_AGENCY_ID AND ACCOUNT_TYPE = :IN_ACCT_TYPE AND LANE_ID = :IN_LANE_ID  AND IS_AUTO_SUSPEND = 'F' AND IS_FAST_PROCESS = 'F' AND PLAN_TYPE = 0 AND ROWNUM &lt; 2"></entry>
<entry key="GET_SPEED_THRESHOLD_FOR_AGENCY" value="SELECT LOWER_SPEED_THRESHOLD FROM TPMS.T_SPEED_THRESHOLD WHERE AGENCY_ID = :IN_AGENCY_ID AND ACCOUNT_TYPE = :IN_ACCT_TYPE AND IS_AUTO_SUSPEND = 'F' AND IS_FAST_PROCESS = 'F' AND PLAN_TYPE = 0 AND ROWNUM &lt; 2"></entry>
<entry key="GET_DEVICE_SPECIAL_PLAN" value="select  p.plan_type from CRM.V_ACCOUNT_PLAN_DETAIL p, CRM.V_plan_policy pp where p.etc_account_id = :in_account_id  and p.plan_type = pp.plan_type and pp.agency_id = :IN_AGENCY_ID 
and ( ( p.plan_type= 8 and p.device_no= :in_device_no and NVL(TO_DATE(:IN_TX_DATE,'YYYY-MM-DD'),TO_DATE('1857-01-01','YYYY-MM-DD')) between plan_start_date and plan_end_date ) or (p.plan_type in ( 13 , 67, 55, 65)) or ( pp.is_revenue_plan='F' and (is_device_specific='F' or  is_device_specific='N') ) 
or (pp.is_revenue_plan='F'  and (is_device_specific='T' or  is_device_specific='Y') and p.device_no=:in_device_no ) ) and rownum &lt; 2"></entry>
<!-- <entry key="GET_T_QATP_STATISTICS" value="SELECT ATP_FILE_ID FROM TPMS.T_QATP_STATISTICS WHERE XFER_CONTROL_ID = :XFER_CONTROL_ID AND FILE_TYPE=:FILE_TYPE"></entry> -->
 <entry key="UPDATE_T_QATP_STATISTICS" value="UPDATE T_QATP_STATISTICS SET RECORD_COUNT = RECORD_COUNT+1 WHERE ATP_FILE_ID=? AND FILE_TYPE=?">
</entry>  

<entry key="NY_PLAN_COUNT"
					value="select max(Kount) from 
						(select count(*) Kount
						from crm.v_account_plan_detail apd, crm.v_etc_account acc
						where apd.etc_account_id = acc.etc_account_id
						and   apd.device_no = :DEVICE_NO
						and   to_date(:TRX_DATE, 'YYYY-MM-DD') between apd.plan_start_date and nvl(apd.plan_end_date,trunc(sysdate+1))
						and   apd.plan_type = 8 
						and   acc.acct_act_status = 3
						and   apd.apd_id NOT IN (select apd_id
						from tpms.t_account_plan_suspension aps
						where aps.apd_id = apd.apd_id
						and to_date(:TRX_DATE, 'YYYY-MM-DD') between aps.start_date and aps.end_date)
						union
						select count(*) Kount from crm.v_h_account_plan_detail apd, crm.v_etc_account acc
						where apd.etc_account_id = acc.etc_account_id
						and   apd.device_no = :DEVICE_NO
						and   to_date(:TRX_DATE, 'YYYY-MM-DD') between apd.plan_start_date and nvl(apd.plan_end_date,trunc(sysdate+1))
						and   apd.plan_type = 8
						and   acc.acct_act_status = 3
						and   apd.apd_id NOT IN (select apd_id
						from tpms.t_account_plan_suspension aps
						where aps.apd_id = apd.apd_id
						and to_date(:TRX_DATE, 'YYYY-MM-DD') between aps.start_date and aps.end_date))">
					</entry> 
					
					
<entry key="GET_T_TOLL_POST_LIMIT" value="SELECT PLAZA_AGENCY_ID,ETC_TX_STATUS,ALLOWED_DAYS,POACHING_LIMIT FROM MASTER.T_TOLL_POST_LIMIT"></entry>		      				
			</map>
		</constructor-arg>
	</bean>
</beans>